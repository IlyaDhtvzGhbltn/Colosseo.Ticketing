// <auto-generated />
using System;
using Colosseo.Exercises.Ticketing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Colosseo.Exercises.Ticketing.Data.Migrations
{
    [DbContext(typeof(TicketingDbContext))]
    partial class TicketingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("EventStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdPhysicalSeatLayout")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdEvent");

                    b.HasIndex("IdPhysicalSeatLayout");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.PhysicalSeatLayout", b =>
                {
                    b.Property<int>("IdPhysicalSeatLayout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPhysicalSeatLayout");

                    b.ToTable("PhysicalSeatLayout");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Seat", b =>
                {
                    b.Property<int>("IdSeat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPhysicalSeatLayout")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("IdSeat");

                    b.HasIndex("IdPhysicalSeatLayout");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.SeatLock", b =>
                {
                    b.Property<int>("IdSeatLock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdSeat")
                        .HasColumnType("int");

                    b.Property<string>("LockCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ValidUntil")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IdSeatLock");

                    b.HasIndex("IdSeat");

                    b.HasIndex("IdEvent", "IdSeat")
                        .IsUnique();

                    b.ToTable("SeatLock");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Ticket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdSeat")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("IdTicket");

                    b.HasIndex("IdEvent");

                    b.HasIndex("IdSeat");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Event", b =>
                {
                    b.HasOne("Colosseo.Exercises.Ticketing.Data.PhysicalSeatLayout", "PhysicalSeatLayout")
                        .WithMany("Events")
                        .HasForeignKey("IdPhysicalSeatLayout")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PhysicalSeatLayout");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Seat", b =>
                {
                    b.HasOne("Colosseo.Exercises.Ticketing.Data.PhysicalSeatLayout", "PhysicalSeatLayout")
                        .WithMany("Seats")
                        .HasForeignKey("IdPhysicalSeatLayout")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PhysicalSeatLayout");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.SeatLock", b =>
                {
                    b.HasOne("Colosseo.Exercises.Ticketing.Data.Event", "Event")
                        .WithMany("SeatLocks")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Colosseo.Exercises.Ticketing.Data.Seat", "Seat")
                        .WithMany("SeatLocks")
                        .HasForeignKey("IdSeat")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Ticket", b =>
                {
                    b.HasOne("Colosseo.Exercises.Ticketing.Data.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("IdEvent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Colosseo.Exercises.Ticketing.Data.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("IdSeat")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Event", b =>
                {
                    b.Navigation("SeatLocks");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.PhysicalSeatLayout", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Colosseo.Exercises.Ticketing.Data.Seat", b =>
                {
                    b.Navigation("SeatLocks");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
